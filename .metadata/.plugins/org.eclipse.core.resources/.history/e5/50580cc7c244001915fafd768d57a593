package com.spring.demp.dynamicproxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Date;

public class LoggerHandler implements InvocationHandler {
	//定义传入的目标对象
	private Object delegate;
	//定义代理对象执行方法
	//目标对象作为参数传入
	public Object bind(Object delegate) {
		this.delegate = delegate;
		//调用目标对象的类加载器,调用目标对象的接口,this指针指向代理对象
		return Proxy.newProxyInstance(delegate.getClass().getClassLoader(), delegate.getClass().getInterfaces(), this);
	}
	//
	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		Object result = null;
		//当目标方法被调用
		result = method.invoke(delegate, args);
		//目标对象需要加入的方法定义在这里
		System.out.println("日志：" + args[0] + "于" + new Date().toLocaleString() + "登录");
		return result;
	}
}
